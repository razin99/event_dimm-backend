# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEventInput {
  date: Timestamp!
  description: String!
  fee: Float!
  location: String!

  """user id of organizer"""
  organizerId: String!
  title: String!
}

input CreateUserInput {
  first_name: String!
  last_name: String!
  password: String!
  username: String!
}

type Event {
  attendees: [User!]
  date: Timestamp!
  description: String!
  fee: Float!
  id: String!
  location: String!
  organizer: User!
  title: String!
}

type Mutation {
  attend(id: String!, userId: String!): Event!
  createEvent(createEventInput: CreateEventInput!): Event!

  """create new user and return it back"""
  createUser(createUserInput: CreateUserInput!): User!
  removeEvent(id: String!): Boolean!

  """Return true on success, false on failure"""
  removeUser(id: String!): Boolean!
  unattend(id: String!, userId: String!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!

  """if password or username is left blank, it would not be updated"""
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
  event(id: String!): Event!
  events: [Event!]!

  """get one user with given id"""
  user(id: String!): User!

  """get all users from database"""
  users: [User!]!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateEventInput {
  date: Timestamp!
  description: String!
  fee: Float!
  id: String!
  location: String!

  """user id of organizer"""
  organizerId: String
  title: String!
}

input UpdateUserInput {
  first_name: String
  id: String!
  last_name: String
  password: String
  username: String
}

type User {
  attending: [Event!]
  first_name: String!
  id: String!
  last_name: String!
  organizing: [Event!]
  password: String!
  username: String!
}
